package com.delegate

import kotlin.reflect.KProperty
import kotlin.properties.ReadOnlyProperty

class ResourceID {
	val image_id: String = "101"
	val text_id: String = "102"
}

class MyUI {
	val image by bindResource(ResourceID())
	val text by bindResource(ResourceID())
}

fun bindResource(id: ResourceID): ResourceLoader {
	val resourceLoader = ResourceLoader(id)
	return resourceLoader
}
class ResourceLoader(id: ResourceID) {
	val d: ResourceID = id
	operator fun provideDelegate(thisRef: MyUI, prop: KProperty<*>): ReadOnlyProperty<MyUI, String> {
		if (checkProperty(thisRef, prop.name)) {
			return RopIml(d)
		} else {
			throw Exception("Error ${prop.name}")
//			return RopIml(d)
		}
	}

	private fun checkProperty(thisRef: MyUI, name: String): Boolean {
		return name.equals("image") || name.equals("text")
	}
}

class RopIml(id: ResourceID) : ReadOnlyProperty<MyUI, String> {
	val d = id
	override fun getValue(thisRef: MyUI, property: KProperty<*>): String {
		if (property.name.equals("image"))
			return property.name + "  " + d.image_id
		else
			return property.name + "  " + d.text_id
	}
}


fun main(args: Array<String>) {
	try {
		var ui = MyUI()
		println(ui.image)
		println(ui.text)
	} catch (e: Exception) {
		println(e.message)
	}
	println("this is main")

}


















