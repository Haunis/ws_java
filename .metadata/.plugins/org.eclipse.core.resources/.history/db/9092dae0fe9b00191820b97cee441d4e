package com.jiage.spinlock.condition;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class ResourceByCondition {
	boolean isProduceFinish = true;
	private volatile int count;

	ReentrantLock lock = new ReentrantLock();
	Condition con_producer = lock.newCondition();
	Condition con_consumer = lock.newCondition();

	public void produce() {

		if (!isProduceFinish) {
			count++;
			System.out.println("生产完成 " + count);
			isProduceFinish = true;
			con_consumer.signal();
		} else {
			try {
				con_producer.await();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

		}
	}

	public void consume() {

		if (isProduceFinish) {
			System.out.println("消费完成 " + count);
			isProduceFinish = false;
			con_producer.signal();
		} else {
			try {
				con_consumer.await();
				System.out.println("cosume await");
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}

	}

}
