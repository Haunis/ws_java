package com.faxing;

import java.util.ArrayList;
import java.util.List;

/**
 * 参考： http://www.importnew.com/24029.html
 * 
 * 通配符：使用在类的后面，如：List<? extends Fruit>
 * 
 * 边界符：使用在方法返回值前面，如： private <T extends Fruit> void getFruit(List<T> list){}
 * 
 * 类型擦除的处理： 使用边界符
 * 
 * 因为泛型擦除的存在，所以要注意以下问题： 1. java里没有泛型数组
 *
 */
public class Amain<T> {
	public static void main(String[] args) {
		List<Apple> appleList = new ArrayList<Apple>();
		List<Orange> orangeList = new ArrayList<Orange>();
		List<Fruit> fruitList = new ArrayList<Fruit>();

		Fruit fruit0, fruit2, fruit3;
		Utils<Fruit> utils = new Utils<Fruit>();
		Utils<Apple> utilsApple = new Utils<Apple>();
//		Utils utils = new Utils();

		System.out.println("List<Fruit>可以添加Apple,Orange,Fruit------------------------");
		fruitList.add(new Apple());
		fruitList.add(new Orange());
		fruitList.add(new Fruit());
		System.out.println("fruitList0 : " + fruitList.get(0));
		System.out.println("fruitList1 : " + fruitList.get(1));
		System.out.println("fruitList2 : " + fruitList.get(2));

		System.out.println("List<Apple>只可以添加Apple-----------------------------------");
		appleList.add(new Apple());
//		appleList.add((Apple) new Fruit());//运行时报错，ClassCastExeception
		System.out.println("appleList0 : " + appleList.get(0));

		System.out.println("fruitList使用泛型方法---------------------------------------------");
		fruit0 = utils.getFirst(fruitList);
		fruit2 = utils.getFirst2(fruitList);// 使用通配符即可
		fruit3 = utils.getFirst3(fruitList);// 使用边界符亦可
		System.out.println("fruit0=" + fruit0 + "\nfruit2=" + fruit2 + "\nfruit3=" + fruit3);

		System.out.println("appleList使用泛型方法---------------------------------------------");
//		fruit0 = (Fruit) utils.getFirst(appleList);// 编译通不过
		fruit2 = utils.getFirst2(appleList);// 使用通配符即可
		fruit3 = utils.getFirst3(appleList);// 使用边界符亦可
		System.out.println("fruit2=" + fruit2 + "\nfruit3=" + fruit3);

		System.out.println("<? extends Fruit> 只能get ，不能put ---------------------------");
		List<? extends Fruit> listExtends = new ArrayList<Apple>();
//		List<? extends Fruit> listExtends = new ArrayList<Orange>();
//		List<? extends Fruit> listExtends = new ArrayList<Fruit>();

//		listExtends.add(new Apple());//编译不过***
//		listExtends2.add(new Fruit());//编译不过**
		listExtends.add(null);
		listExtends.get(0);

//		utils.put(listExtends, new Apple());//编译不过
//		utils.put2(listExtends, new Apple());//编译不过
//		utils.put(listExtends2, new Fruit());//编译不过
//		utils.put2(listExtends2, new Fruit());//编译不过
//		utils.getFirst(listExtends);//编译不过
//		utils.getFirst2(listExtends);//数组中无元素
//		utils.getFirst3(listExtends);//数组中无元素

		System.out.println("<? super Apple>不能get，只能put ---------------------------------------------");
		List<? super Apple> listSuper0 = new ArrayList<Apple>();
		List<? super Apple> listSuper1 = new ArrayList<Fruit>();
		List<? super Apple> listSuper2 = new ArrayList<Object>();
		listSuper0.add(new Apple());
		listSuper1.add(new Apple());
		listSuper2.add(new Apple());
//		listSuper1.add(new Fruit());//编译不过
		
		fruit0 = (Fruit) listSuper0.get(0);

		utils.put(fruitList, new Fruit());
		utils.put(fruitList, new Apple());
		utils.put(fruitList, new Orange());
//		utils.put(listSuper, new Fruit());// 编译不过
//		utils.put(listSuper, new Apple());// 编译不过
//		utils.put(listSuper, new Orange());// 编译不过
		utils.put2(fruitList, new Fruit());
		utils.put2(fruitList, new Apple());
		utils.put2(fruitList, new Orange());
//		utils2.put2(listSuper, new Fruit());// 编译不过
		utilsApple.put2(listSuper0, new Apple());
//		utils2.put2(listSuper, new Orange());// 编译不过

		// java里没有泛型数组
//		List<Integer>[] arrayOfLists = new List<Integer>[2]; 

		Object[] strings = new String[2];
		strings[0] = "a";
//		strings[1]=2;

	}
}
