package com.jiage.wait;

public class MainWait {
	static int total = 0;

	public static void main(String[] args) throws InterruptedException {
		String lock = "a";

		final Thread t1 = new Thread(() -> {
			synchronized (lock) {
				System.out.println("t1 等待t2完成计算");
				// 当前线程A等待
				try {
					lock.wait();// 持有lock monitor的此线程等待，并释放锁lock
//					Thread.currentThread().wait();//java.lang.IllegalMonitorStateException；Thread.currentThread()并无monitor
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				System.out.println("t1 计算的总和是：" + total);

			}
		});

		final Thread t2 = new Thread(() -> {
			synchronized (lock) {
				for (int i = 0; i < 100; i++) {
					total += i;
				}
				// （完成计算了）唤醒在此对象监视器上等待的单个线程，在本例中线程A被唤醒
				lock.notify();// 唤醒持有lock monitor的线程
				System.out.println("t2 计算完成");
			}
		});

		Thread t3 = new Thread(() -> {
			System.out.println("t3 run");
			try {
//				t1.join();
				t1.wait();//不持有锁t1
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			System.out.println("t3 finish");
		});

		t1.start();
		t2.start();
		t3.start();
	}
}
