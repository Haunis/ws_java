package com.jiage.synchronize;

import java.util.concurrent.TimeUnit;

/**
 * Created by zejian on 2017/6/2. Blog : http://blog.csdn.net/javazejian
 * [原文地址,请尊重原创]
 */
public class SynchronizedBlocked implements Runnable {

	public synchronized void fun() {
		System.out.println(Thread.currentThread().getName() + " Trying to call f()");
		while (true) // Never releases lock
			Thread.yield();
	}

	/**
	 * 在构造器中创建新线程并启动获取对象锁
	 */
	public SynchronizedBlocked() {
		// 该线程已持有当前实例锁
		new Thread() {
			public void run() {
				this.setName("InnerThread");
				fun(); // Lock acquired by this thread
			}
		}.start();
	}

	public void run() {
		// 中断判断
		while (true) {
//			if (Thread.interrupted()) {
			if (Thread.currentThread().isInterrupted()) {
				System.out.println("中断线程!!");
				break;
			} else {
				fun();
			}
		}
	}

	public static void main(String[] args) throws InterruptedException {
		SynchronizedBlocked sync = new SynchronizedBlocked();
		Thread t = new Thread(sync);
		// 启动后调用f()方法,无法获取当前实例锁处于等待状态
		t.setName("TThread");
		t.start();
		TimeUnit.SECONDS.sleep(1);
		// 中断线程,无法生效
		t.interrupt();
	}
}