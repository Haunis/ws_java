package com.jiage.spinlock;

import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

public class CLHLock implements MyLock {
	private static class CLHLockNode {
		public boolean locked = true;
	}

	private CLHLockNode tail;
	private ThreadLocal<CLHLockNode> local = new ThreadLocal<CLHLockNode>();
	private AtomicReferenceFieldUpdater<CLHLock, CLHLockNode> updater = AtomicReferenceFieldUpdater
			.newUpdater(CLHLock.class, CLHLockNode.class, "tail");

	@Override
	public void lock() {
		CLHLockNode node = new CLHLockNode();
		local.set(node);

		CLHLockNode preNode = updater.getAndSet(this, node);
		while (preNode.locked) {

		}
	}

	@Override
	public void unLock() {
		CLHLockNode currentNode = local.get();
		currentNode.locked = false;
	}
}
