package com.jiage.spinlock;

import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

public class CLHLock implements MyLock {
	private static class CLHLockNode {
		public volatile boolean locked = true;
	}

	private volatile CLHLockNode tail;
	private ThreadLocal<CLHLockNode> local = new ThreadLocal<CLHLockNode>();
	private AtomicReferenceFieldUpdater<CLHLock, CLHLockNode> updater = AtomicReferenceFieldUpdater
			.newUpdater(CLHLock.class, CLHLockNode.class, "tail");
	private AtomicReference<Thread> atomicReference = new AtomicReference<Thread>();
	private int count = 0;

	@Override
	public void lock() {
		if (atomicReference.get() == Thread.currentThread()) {
			System.out.println("iniiiiiiiiiiiiiiiiiiiiiii");
			count++;
			return;
		}

		CLHLockNode node = new CLHLockNode();
		local.set(node);

		CLHLockNode preNode = updater.getAndSet(this, node);// 自旋
		if (preNode != null) {
			while (preNode.locked) {
			}
		}

		atomicReference.compareAndSet(null, Thread.currentThread());
	}

	@Override
	public void unLock() {
		if (count > 0) {
			count--;
		} else {
			atomicReference.compareAndSet(Thread.currentThread(), null);
			CLHLockNode currentNode = local.get();
			currentNode.locked = false;
			System.out.println(Thread.currentThread().getName() + " rease");
		}
	}
}
