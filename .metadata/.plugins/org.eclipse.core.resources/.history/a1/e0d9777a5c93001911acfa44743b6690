package com.jiage.spinlock;

import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

/**
 * 参考：https://blog.csdn.net/qq_34337272/article/details/81252853
 *
 */
public class MCSLock implements MyLock {
	private static class MCSNode {
		public boolean isLocked = false;
		public MCSNode next;
	}

	private MCSNode queue;
	private AtomicReferenceFieldUpdater<MCSLock, MCSNode> updater = AtomicReferenceFieldUpdater
			.newUpdater(MCSLock.class, MCSNode.class, "queue");
	private AtomicReference<Thread> atomicReference = new AtomicReference<Thread>();

	@Override
	public void lock() {
		MCSNode node = new MCSNode();
		MCSNode preNode = updater.getAndSet(this, node);
		if(preNode!=null) {
			while() {
				
			}
		}
	}

	@Override
	public void unLock() {

	}

}
